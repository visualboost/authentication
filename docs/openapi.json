{
  "openapi": "3.0.0",
  "info": {
    "title": "Authentication and User Management API",
    "version": "1.0.0",
    "description": "This API provides endpoints for managing user authentication, authorization, and profile operations. It includes features like user registration, login, two-factor authentication, password and email updates, and various system-level functionalities such as retrieving hooks and states. Designed to support secure and scalable authentication workflows."
  },
  "servers": [
    {
      "url": "http://localhost:80"
    }
  ],
  "tags": [
    {
      "name": "System",
      "description": "System-related endpoints, such as XSRF token retrieval."
    },
    {
      "name": "Authentication",
      "description": "Endpoints related to user authentication, such as registration, login, logout, and two-factor authentication."
    },
    {
      "name": "Confirmation",
      "description": "Endpoints related to confirmation processes, such as registration confirmation and password reset confirmation."
    }
  ],
  "paths": {
    "/api/system/xsfr": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get an XSRF token",
        "description": "Retrieve an XSRF token to avoid CSRF attacks. This should be your first API call.",
        "operationId": "fetchXSFRToken",
        "responses": {
          "200": {
            "description": "XSRF token retrieved successfully",
            "headers": {
              "Set-Cookie": {
                "description": "Contains the XSRF token",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/system/privacypolicy": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get privacy policy settings",
        "description": "Returns whether the privacy policy is displayed and its URL if available.",
        "operationId": "getPrivacyPolicy",
        "responses": {
          "200": {
            "description": "Privacy policy settings",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "showPrivacyPolicy": {
                      "type": "boolean",
                      "description": "Indicates if privacy policy is shown.",
                      "example": true
                    },
                    "privacyPolicyUrl": {
                      "type": "string",
                      "description": "URL of the privacy policy.",
                      "example": "https://example.com/privacy"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Privacy policy not found"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/system/state": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get system initialization state",
        "description": "Checks if the system has been initialized by verifying whether an admin user exists. Returns `INITIALIZED` if the admin user exists, or `NOT_INITIALIZED` otherwise.",
        "operationId": "getSystemState",
        "responses": {
          "200": {
            "description": "System initialization state",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "state": {
                      "type": "string",
                      "enum": [
                        "INITIALIZED",
                        "NOT_INITIALIZED"
                      ],
                      "description": "Initialization state of the system.",
                      "example": "INITIALIZED"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/system/hooks": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Get system hooks",
        "description": "Retrieve all hooks configured in the system. The response contains keys representing hook types and their corresponding URLs.",
        "operationId": "getSystemHooks",
        "parameters": [
          {
            "name": "x-xsrf-token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "XSRF token obtained from the `/api/system/xsfr` endpoint"
          }
        ],
        "responses": {
          "200": {
            "description": "List of system hooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "AUTHENTICATION": {
                      "type": "string",
                      "description": "URL for authentication-related actions",
                      "example": "https://example.com/authentication"
                    },
                    "PASSWORD_RESET": {
                      "type": "string",
                      "description": "URL for resetting passwords",
                      "example": "https://example.com/password-reset"
                    },
                    "PASSWORD_CHANGE": {
                      "type": "string",
                      "description": "URL for changing passwords",
                      "example": "https://example.com/password-change"
                    },
                    "EMAIL_CHANGE": {
                      "type": "string",
                      "description": "URL for changing email addresses",
                      "example": "https://example.com/email-change"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/authentication/registration": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Create a new user",
        "description": "Register a new user and send a confirmation email to the provided email address.",
        "operationId": "register",
        "security": [
          {
            "XSFR": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username of the new user",
                    "example": "johndoe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the new user",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "The password for the new user",
                    "example": "mypassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully registered"
          },
          "400": {
            "description": "Invalid input data"
          },
          "403": {
            "description": "Admin isn't created yet"
          },
          "409": {
            "description": "User with the same email address does already exist"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/authentication/signin": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Sign in",
        "description": "Authenticate a user with their email and password.",
        "operationId": "signin",
        "security": [
          {
            "XSFR": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the user",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "The password for the user",
                    "example": "mypassword123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User successfully signed in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The authentication token. It is only present if two-factor authentication is not enabled.",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "hook": {
                      "type": "string",
                      "nullable": true,
                      "description": "A hook set by the admin that can be used to redirect the user after a successful authentication.",
                      "example": "http://example.com/dashboard"
                    },
                    "twoFactorAuthId": {
                      "type": "string",
                      "nullable": true,
                      "description": "If two-factor authentication is enabled, this field will be populated with an identifier for the two-factor authentication process.",
                      "example": "5f8d0d55b54764421b7156fe"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/authentication/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout",
        "description": "Logs out the authenticated user.",
        "operationId": "signout",
        "security": [
          {
            "XSFR": []
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully logged out"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/confirm/two-factor/{twoFactorDocId}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Confirm two-factor authentication",
        "description": "Validate the two-factor authentication code to complete the login process.",
        "operationId": "confirmTwoFactorAuthentication",
        "security": [
          {
            "XSFR": []
          }
        ],
        "parameters": [
          {
            "name": "twoFactorDocId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the two-factor authentication document."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "The two-factor authentication code provided by the user.",
                    "example": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Two-factor authentication successfully validated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The authentication token provided upon successful validation.",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    },
                    "hook": {
                      "type": "string",
                      "nullable": true,
                      "description": "A hook set by the admin that can be used to redirect the user after a successful authentication.",
                      "example": "http://example.com/dashboard"
                    },
                    "twoFactorAuthId": {
                      "type": "string",
                      "nullable": true,
                      "description": "Will be null since the two-factor process is successfully completed.",
                      "example": null
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, e.g., missing `twoFactorDocId`."
          },
          "404": {
            "description": "Two-factor authentication document or user not found."
          },
          "409": {
            "description": "The provided two-factor authentication code is incorrect."
          },
          "410": {
            "description": "The two-factor authentication code is expired."
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/confirm/registration": {
      "get": {
        "tags": [
          "Confirmation"
        ],
        "summary": "Confirm registration",
        "description": "Triggered when the registration confirmation email button is clicked. The user will be redirected to a 'confirmed' view showing successful registration.",
        "operationId": "confirmRegistration",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user being confirmed."
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects the user to a confirmation view or to a custom hook URL if defined.",
            "headers": {
              "Location": {
                "description": "The URL where the user will be redirected to.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, e.g., missing `userId`."
          },
          "404": {
            "description": "User not found."
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/confirm/password/reset": {
      "get": {
        "tags": [
          "Confirmation"
        ],
        "summary": "Confirm password reset",
        "description": "Triggered if the reset password link in the 'Confirm reset password' email is clicked. Validates if a valid password reset modification object exists and redirects the user accordingly.",
        "operationId": "confirmPasswordReset",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The token obtained after requesting a password reset."
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects the user to either a custom hook or to the reset password path.",
            "headers": {
              "Location": {
                "description": "The URL where the user will be redirected, with an appended token.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "The user modification is not a password reset."
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/authentication/reset/password": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Request password reset",
        "description": "Initiates the password reset process by sending a reset password email to the user's email address.",
        "operationId": "requestPasswordReset",
        "parameters": [
          {
            "name": "x-xsrf-token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "XSRF token obtained from the `/api/system/xsfr` endpoint"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the user requesting a password reset.",
                    "example": "johndoe@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset request processed successfully. If the user exists, an email is sent."
          },
          "400": {
            "description": "Invalid input data, e.g., missing email."
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/authentication/token": {
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh authentication token",
        "description": "Creates a new authentication token and sets a new refresh token as an HttpOnly cookie. Requires a valid refresh token sent as a cookie.",
        "operationId": "fetchToken",
        "parameters": [
          {
            "name": "x-xsrf-token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "XSRF token obtained from the `/api/system/xsfr` endpoint"
          }
        ],
        "responses": {
          "200": {
            "description": "Authentication token successfully refreshed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "token": {
                      "type": "string",
                      "description": "The new authentication token.",
                      "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                    }
                  }
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "description": "Contains the new refresh token.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Refresh token is missing or invalid."
          },
          "404": {
            "description": "User not found for the provided refresh token."
          },
          "500": {
            "description": "Server error."
          }
        }
      }
    },
    "/api/user/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user details",
        "description": "Retrieves details of a user by their ID. The Bearer token required for authorization can be obtained by calling `/api/authentication/signin`. Scope `user.read` is required to access user details other users",
        "operationId": "getUserDetails",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the user to retrieve."
          },
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bearer token for authentication, obtained from `/api/authentication/signin`."
          },
          {
            "name": "x-xsrf-token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "XSRF token obtained from the `/api/system/xsfr` endpoint"
          }
        ],
        "responses": {
          "200": {
            "description": "User details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "description": "Unique identifier of the user.",
                      "example": "5f8d0d55b54764421b7156fe"
                    },
                    "ip": {
                      "type": "string",
                      "description": "The IP address of the user.",
                      "example": "192.168.1.1"
                    },
                    "username": {
                      "type": "string",
                      "description": "The username of the user.",
                      "example": "johndoe"
                    },
                    "email": {
                      "type": "string",
                      "format": "email",
                      "description": "The email address of the user.",
                      "example": "johndoe@example.com"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role of the user (e.g., ADMIN, USER).",
                      "example": "user"
                    },
                    "state": {
                      "type": "string",
                      "description": "The current state of the user. (.e.g. `ACTIVE`, `PENDING`, `BLOCKED`)",
                      "example": "ACTIVE"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp when the user was created.",
                      "example": "2023-01-01T12:00:00Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp when the user was last updated.",
                      "example": "2023-06-01T12:00:00Z"
                    },
                    "lastLogin": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The timestamp of the user's last login.",
                      "example": "2023-07-01T10:00:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing parameter `userId`"
          },
          "403": {
            "description": "The user is not authorized to access this resource."
          },
          "404": {
            "description": "User not found."
          },
          "406": {
            "description": "User is not ACTIVE."
          },
          "500": {
            "description": "Server error."
          }
        }
      }
    },
    "/api/user/modify/email": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Modify user email",
        "description": "Creates an email modification object that allows the user to change their email address. An email is sent to confirm the change. The Bearer token required for authorization can be obtained by calling `/api/authentication/signin`.",
        "operationId": "modifyEmail",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The new email address to set.",
                    "example": "newemail@example.com"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bearer token for authentication, obtained from `/api/authentication/signin`."
          },
          {
            "name": "x-xsrf-token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "XSRF token obtained from the `/api/system/xsfr` endpoint"
          }
        ],
        "responses": {
          "200": {
            "description": "Email modification object created successfully. A confirmation email has been sent."
          },
          "400": {
            "description": "Missing / invalid email or invalid authentication token."
          },
          "403": {
            "description": "The user is not authorized to access this resource."
          },
          "404": {
            "description": "User not found."
          },
          "409": {
            "description": "Conflict. Email address already exists."
          },
          "406": {
            "description": "User is not ACTIVE."
          },
          "500": {
            "description": "Server error."
          }
        }
      }
    },
    "/api/user/modify/password": {
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Modify user password",
        "description": "Creates a password modification object that allows the user to change their password. An email is sent to confirm the change. The Bearer token required for authorization can be obtained by calling `/api/authentication/signin`.",
        "operationId": "modifyPassword",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "currentPassword": {
                    "type": "string",
                    "description": "The current password of the user.",
                    "example": "oldpassword123"
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "The new password to set.",
                    "example": "newpassword456"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Bearer token for authentication, obtained from `/api/authentication/signin`."
          },
          {
            "name": "x-xsrf-token",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "XSRF token obtained from the `/api/system/xsfr` endpoint"
          }
        ],
        "responses": {
          "200": {
            "description": "Password modification object created successfully. A confirmation email has been sent."
          },
          "400": {
            "description": "Missing or invalid currentPassword or newPassword or invalid authentication token."
          },
          "403": {
            "description": "The user is not authorized to access this resource or the current password is incorrect."
          },
          "404": {
            "description": "User not found."
          },
          "406": {
            "description": "User is not ACTIVE."
          },
          "500": {
            "description": "Server error."
          }
        }
      }
    },
    "/api/admin/user": {
      "get": {
        "summary": "Retrieve all non-blocked users",
        "description": "Returns a list of all non-blocked users. Results can be filtered by username or email using the query parameters `value` and `type`.<br/>Required scope: `user.read:all`",
        "operationId": "getAllUsers",
        "tags": [
          "User"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "parameters": [
          {
            "name": "value",
            "in": "query",
            "description": "The value to search for (username or email).",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of search to perform (`username` or `email`).",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "username",
                "email"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of non-blocked users matching the search criteria.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "The unique identifier of the user.",
                        "example": "12345abcde"
                      },
                      "username": {
                        "type": "string",
                        "description": "The username of the user.",
                        "example": "johndoe"
                      },
                      "email": {
                        "type": "string",
                        "description": "The email address of the user.",
                        "example": "johndoe@example.com"
                      },
                      "state": {
                        "type": "string",
                        "description": "The current state of the user (e.g., active, blocked, etc.).",
                        "example": "active"
                      },
                      "role": {
                        "type": "string",
                        "description": "The role assigned to the user.",
                        "example": "admin"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time when the user was created.",
                        "example": "2023-01-01T12:00:00Z"
                      },
                      "lastLogin": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The date and time of the user's last login.",
                        "example": "2023-05-01T14:30:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`"
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/admin/user/add": {
      "post": {
        "summary": "Create a new user",
        "description": "Creates a new user in the system. The user can optionally be activated immediately or sent an activation email.<br/>Required scope: `user.write`",
        "operationId": "createUser",
        "tags": [
          "User"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "The username of the new user.",
                    "example": "johndoe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the new user.",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "The password for the new user.",
                    "example": "P@ssw0rd123"
                  },
                  "role": {
                    "type": "string",
                    "description": "The role to assign to the new user.",
                    "example": "USER"
                  },
                  "activateUser": {
                    "type": "boolean",
                    "description": "Whether to activate the user immediately. If false, an activation email will be sent.",
                    "default": false,
                    "example": true
                  }
                },
                "required": [
                  "username",
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly created user details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the user.",
                      "example": "12345abcde"
                    },
                    "username": {
                      "type": "string",
                      "description": "The username of the user.",
                      "example": "johndoe"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email address of the user.",
                      "example": "johndoe@example.com"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role assigned to the user.",
                      "example": "USER"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time when the user was created.",
                      "example": "2023-01-01T12:00:00Z"
                    },
                    "lastLogin": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time of the user's last login.",
                      "example": "2023-05-01T14:30:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Required fields are missing or invalid."
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`"
          },
          "409": {
            "description": "Conflict. A user with the given email already exists."
          },
          "424": {
            "description": "Failed dependency. The activation email could not be sent."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/admin/user/invite": {
      "post": {
        "summary": "Invite a new user",
        "description": "Invites a new user by sending an invitation email. The user will be assigned a specific role upon accepting the invitation.<br/>>Required scope: `user.write:invite`.",
        "operationId": "inviteUser",
        "tags": [
          "User"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the user being invited.",
                    "example": "Jane Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the user being invited.",
                    "example": "jane.doe@example.com"
                  },
                  "role": {
                    "type": "string",
                    "description": "The role to assign to the invited user. Admin roles cannot be assigned through this endpoint.",
                    "example": "editor"
                  }
                },
                "required": [
                  "name",
                  "email",
                  "role"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The invitation was sent successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The status of the operation.",
                      "example": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The 'name', 'email', or 'role' field is missing or invalid."
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`"
          },
          "409": {
            "description": "Conflict. Either the email already exists or the role is `ADMIN` or does not exist"
          },
          "424": {
            "description": "Failed dependency. The invitation email could not be sent."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/admin/user/{userId}": {
      "delete": {
        "summary": "Delete a user",
        "description": "Deletes a user by their user ID.<br/>Required scope: `user.write`.",
        "operationId": "deleteUser",
        "tags": [
          "User"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user to delete.",
            "schema": {
              "type": "string",
              "example": "12345abcde"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the deleted user.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the user.",
                      "example": "12345abcde"
                    },
                    "username": {
                      "type": "string",
                      "description": "The username of the deleted user.",
                      "example": "johndoe"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email address of the deleted user.",
                      "example": "johndoe@example.com"
                    },
                    "role": {
                      "type": "string",
                      "description": "The role of the deleted user.",
                      "example": "editor"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time when the user was created.",
                      "example": "2023-01-01T12:00:00Z"
                    },
                    "lastLogin": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time of the user's last login.",
                      "example": "2023-05-01T14:30:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The 'userId' parameter is missing or invalid."
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/admin/user/{userId}/role": {
      "patch": {
        "summary": "Update a user's role",
        "description": "Updates the role of a user by their user ID.<br/>Required scope: `user.write:role`.",
        "operationId": "updateUserRole",
        "tags": [
          "User"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "description": "The ID of the user whose role will be updated.",
            "schema": {
              "type": "string",
              "example": "12345abcde"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "description": "The new role to assign to the user.",
                    "example": "editor"
                  }
                },
                "required": [
                  "role"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Details of the user with the updated role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "The unique identifier of the user.",
                      "example": "12345abcde"
                    },
                    "username": {
                      "type": "string",
                      "description": "The username of the user.",
                      "example": "johndoe"
                    },
                    "email": {
                      "type": "string",
                      "description": "The email address of the user.",
                      "example": "johndoe@example.com"
                    },
                    "role": {
                      "type": "string",
                      "description": "The updated role of the user.",
                      "example": "editor"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time when the user was created.",
                      "example": "2023-01-01T12:00:00Z"
                    },
                    "lastLogin": {
                      "type": "string",
                      "format": "date-time",
                      "description": "The date and time of the user's last login.",
                      "example": "2023-05-01T14:30:00Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The 'userId' parameter or 'role' field is missing or invalid."
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "404": {
            "description": "Not found. The user with the specified ID does not exist."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/admin/role/{id}": {
      "get": {
        "summary": "Retrieve a role by ID",
        "description": "Fetches the details of a specific role by its ID.<br/>Required scopes: `user.role.read` `scope.read`.",
        "operationId": "getRole",
        "tags": [
          "Role"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the role to retrieve.",
            "schema": {
              "type": "string",
              "example": "12345abcde"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The details of the role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "12345abcde"
                    },
                    "name": {
                      "type": "string",
                      "example": "editor"
                    },
                    "description": {
                      "type": "string",
                      "example": "Can edit content."
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "scopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The scopes of the role. Required scope: `scope.read`"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The 'id' parameter is missing or invalid."
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "404": {
            "description": "Not found. The role with the specified ID does not exist."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "put": {
        "summary": "Update a role",
        "description": "Updates the details of an existing role by its ID.<br/>Required scopes: `user.role.write` `scope.read` `scope.write`.",
        "operationId": "upateRole",
        "tags": [
          "Role"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the role to update.",
            "schema": {
              "type": "string",
              "example": "12345abcde"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "editor"
                  },
                  "description": {
                    "type": "string",
                    "example": "Can edit content."
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The scopes of the role. Required scope: `scope.write`"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated role details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "12345abcde"
                    },
                    "name": {
                      "type": "string",
                      "example": "editor"
                    },
                    "description": {
                      "type": "string",
                      "example": "Can edit content."
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "scopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The scopes of the role. Required scope: `scope.read`"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The 'id' parameter or 'name' field is missing or invalid."
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "404": {
            "description": "Not found. The role with the specified ID does not exist."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "delete": {
        "summary": "Delete a role",
        "description": "Deletes an existing role by its ID.<br/>Required scopes: `user.role.write` `scope.read`.",
        "operationId": "deleteRole",
        "tags": [
          "Role"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the role to delete.",
            "schema": {
              "type": "string",
              "example": "12345abcde"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the deleted role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "12345abcde"
                    },
                    "name": {
                      "type": "string",
                      "example": "editor"
                    },
                    "description": {
                      "type": "string",
                      "example": "Can edit content."
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "scopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The scopes of the role. Required scope: `scope.read`"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The 'id' parameter is missing or invalid."
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "404": {
            "description": "Not found. The role with the specified ID does not exist."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/admin/roles": {
      "get": {
        "summary": "Retrieve all roles",
        "description": "Fetches a list of all roles sorted by name.<br/>Required scopes: `user.role.read` `scope.read`.",
        "operationId": "getRoles",
        "tags": [
          "Role"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of roles.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "example": "12345abcde"
                      },
                      "name": {
                        "type": "string",
                        "example": "editor"
                      },
                      "description": {
                        "type": "string",
                        "example": "Can edit content."
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "scopes": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "The scopes of the role. Required scope: `scope.read`"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/admin/role": {
      "post": {
        "summary": "Create a new role",
        "description": "Creates a new role with the specified name, description, and scopes. <br/>Required scopes: `user.role.write` `scope.read` `scope.write`.",
        "operationId": "createRole",
        "tags": [
          "Role"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "editor"
                  },
                  "description": {
                    "type": "string",
                    "example": "Can edit content."
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "The scopes of the role. Required scope: `scope.write`"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The newly created role.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "12345abcde"
                    },
                    "name": {
                      "type": "string",
                      "example": "editor"
                    },
                    "description": {
                      "type": "string",
                      "example": "Can edit content."
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "scopes": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "description": "The scopes of the role. Required scope: `scope.read`"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. The 'name' field is missing."
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "409": {
            "description": "Conflict. A role with the same name already exists."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/admin/settings": {
      "get": {
        "summary": "Retrieve application settings",
        "description": "Fetches the current application settings.<br/>>Required scope: `settings.read`.",
        "operationId": "getSettings",
        "tags": [
          "Settings"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "responses": {
          "200": {
            "description": "The current application settings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settings"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "put": {
        "summary": "Update application settings",
        "description": "Updates the application settings, including token expiration times.<br/>Required scope: `settings.write`.",
        "operationId": "updateSettings",
        "tags": [
          "Settings"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Settings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated application settings.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Settings"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/admin/blacklist": {
      "get": {
        "summary": "Retrieve blacklist entries",
        "description": "Fetches all blacklist entries or searches by email query.<br/>Required scope: `blacklist.read`.",
        "operationId": "getBlacklist",
        "tags": [
          "Blacklist"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": false,
            "description": "The email to search for in the blacklist.",
            "schema": {
              "type": "string",
              "example": "user@example.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of blacklist entries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "ip": {
                        "type": "string",
                        "description": "The IP address of the blacklist entry.",
                        "example": "192.168.0.1"
                      },
                      "email": {
                        "type": "string",
                        "description": "The email of the blacklist entry.",
                        "example": "user@example.com"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time",
                        "description": "The creation timestamp of the blacklist entry.",
                        "example": "2023-01-01T12:00:00Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/admin/blacklist/email": {
      "post": {
        "summary": "Add email to blacklist",
        "description": "Adds an email to the blacklist. Cannot add admin emails.<br/>Required scope: `blacklist.write`.",
        "operationId": "blockEmail",
        "tags": [
          "Blacklist"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email to add to the blacklist.",
                    "example": "user@example.com"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The email was successfully added to the blacklist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Email is missing or invalid."
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "delete": {
        "summary": "Remove email from blacklist",
        "description": "Removes an email from the blacklist.<br/>Required scope: `blacklist.write`.",
        "operationId": "unblockEmail",
        "tags": [
          "Blacklist"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": true,
            "description": "The email to remove from the blacklist.",
            "schema": {
              "type": "string",
              "format": "email",
              "example": "user@example.com"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The email was successfully removed from the blacklist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Email is missing or invalid."
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/admin/blacklist/ip": {
      "post": {
        "summary": "Add IP to blacklist",
        "description": "Adds an IP address to the blacklist. Cannot add admin IPs.<br/>>Required scope: `blacklist.write`.",
        "operationId": "blockIp",
        "tags": [
          "Blacklist"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ip": {
                    "type": "string",
                    "description": "The IP address to add to the blacklist.",
                    "example": "192.168.0.1"
                  }
                },
                "required": [
                  "ip"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The IP address was successfully added to the blacklist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. IP address is missing or invalid."
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "delete": {
        "summary": "Remove IP from blacklist",
        "description": "Removes an IP address from the blacklist.<br/>>Required scope: `blacklist.write`.",
        "operationId": "unblockIp",
        "tags": [
          "Blacklist"
        ],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "parameters": [
          {
            "name": "ip",
            "in": "query",
            "required": true,
            "description": "The IP address to remove from the blacklist.",
            "schema": {
              "type": "string",
              "example": "192.168.0.1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The IP address was successfully removed from the blacklist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. IP address is missing or invalid."
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/api/admin/statistics": {
      "get": {
        "summary": "Retrieve application statistics",
        "description": "Fetches various application statistics, including user counts, timeline history, role statistics, and security metrics.<br/>Required scope: `statistics.read`.",
        "operationId": "getStatistics",
        "tags": ["Statistics"],
        "security": [
          {
            "BearerAuth": [],
            "XSFR": []
          }
        ],
        "responses": {
          "200": {
            "description": "The application statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalUsers": {
                      "type": "number",
                      "description": "The total number of users in the system.",
                      "example": 12345
                    },
                    "newUsers": {
                      "$ref": "#/components/schemas/TimeLineHistory"
                    },
                    "deletedUsers": {
                      "$ref": "#/components/schemas/TimeLineHistory"
                    },
                    "activeUsers": {
                      "$ref": "#/components/schemas/TimeLineHistory"
                    },
                    "userOfRoles": {
                      "type": "array",
                      "description": "Statistics about the number of users per role.",
                      "items": {
                        "$ref": "#/components/schemas/RoleStatistic"
                      }
                    },
                    "failedLoginAttempts": {
                      "$ref": "#/components/schemas/TimeLineHistory"
                    },
                    "securityStatistics": {
                      "$ref": "#/components/schemas/SecurityStatistics"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized access, missing XSRF token, or insufficient scope."
          },
          "406": {
            "description": "User state is not `ACTIVE`."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }

  },
  "components": {
    "schemas": {
      "Settings": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The unique identifier for the settings object.",
            "example": "63f71b54e8b2a6e84d3a01c4"
          },
          "ID": {
            "type": "string",
            "description": "A constant settings ID.",
            "example": "ID"
          },
          "restrictLoginToAdmin": {
            "type": "boolean",
            "description": "Restrict logins to admin users only.",
            "example": true
          },
          "enableRegistrationView": {
            "type": "boolean",
            "description": "Enable or disable the registration view.",
            "example": false
          },
          "showPrivacyPolicy": {
            "type": "boolean",
            "description": "Whether to display the privacy policy.",
            "example": true
          },
          "privacyPolicyUrl": {
            "type": "string",
            "description": "The URL for the privacy policy.",
            "example": "https://example.com/privacy-policy"
          },
          "defaultRole": {
            "type": "string",
            "description": "The default role assigned to new users.",
            "example": "USER"
          },
          "hooks": {
            "type": "array",
            "description": "A list of hooks for specific events.",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The type of the event for which the hook is triggered.",
                  "enum": [
                    "AUTHENTICATION",
                    "PASSWORD_RESET",
                    "PASSWORD_CHANGE",
                    "EMAIL_CHANGE"
                  ],
                  "example": "AUTHENTICATION"
                },
                "url": {
                  "type": "string",
                  "description": "The URL of the hook that will be called when the event is triggered.",
                  "example": "https://example.com/hook-endpoint"
                }
              },
              "required": [
                "type",
                "url"
              ]
            }
          },
          "twoFactorAuthorization": {
            "type": "object",
            "properties": {
              "admin": {
                "type": "boolean",
                "description": "Whether two-factor authorization is enabled for admins.",
                "example": true
              },
              "clients": {
                "type": "boolean",
                "description": "Whether two-factor authorization is enabled for clients.",
                "example": false
              }
            }
          },
          "encryptEmail": {
            "type": "boolean",
            "description": "Whether email addresses should be encrypted.",
            "example": true
          },
          "tokenExpiration": {
            "type": "object",
            "properties": {
              "authenticationToken": {
                "type": "number",
                "description": "The expiration time for authentication tokens, in minutes.",
                "example": 30
              },
              "refreshToken": {
                "type": "number",
                "description": "The expiration time for refresh tokens, in minutes.",
                "example": 400
              }
            }
          }
        }
      },
      "TimeLineHistory": {
        "type": "object",
        "description": "Historical data for a specific metric over different time periods.",
        "properties": {
          "last7Days": {
            "type": "number",
            "description": "The count for the last 7 days.",
            "example": 500
          },
          "last30Days": {
            "type": "number",
            "description": "The count for the last 30 days.",
            "example": 2000
          },
          "last3Months": {
            "type": "number",
            "description": "The count for the last 3 months.",
            "example": 6000
          },
          "last6Months": {
            "type": "number",
            "description": "The count for the last 6 months.",
            "example": 12000
          },
          "last12Months": {
            "type": "number",
            "description": "The count for the last 12 months.",
            "example": 24000
          }
        }
      },
      "RoleStatistic": {
        "type": "object",
        "description": "Statistics about the number of users in a specific role.",
        "properties": {
          "role": {
            "type": "string",
            "description": "The name of the role.",
            "example": "admin"
          },
          "totalUsers": {
            "type": "number",
            "description": "The total number of users with this role.",
            "example": 300
          }
        }
      },
      "SecurityStatistics": {
        "type": "object",
        "description": "Security-related statistics such as blocked emails and IP addresses.",
        "properties": {
          "blockedEmails": {
            "type": "number",
            "description": "The number of blocked email addresses.",
            "example": 50
          },
          "blockedIPs": {
            "type": "number",
            "description": "The number of blocked IP addresses.",
            "example": 30
          }
        }
      }



    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "XSFR": {
        "type": "apiKey",
        "in": "header",
        "name": "XSRF-TOKEN",
        "description": "XSFR token can be requested by `/api/system/xsfr`"
      }
    }
  }
}
